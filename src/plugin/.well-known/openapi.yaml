components:
  schemas:
    CreateTaskRequest:
      properties:
        args:
          description: If the task script accepts arguments, describe each of them
            here. If none, put an empty array.
          items:
            description: Description of the positional argument that must be passed
              to the task
            type: string
          type: array
        code:
          description: A standalone python3 script that executes the task exactly
            as specified. It may reference any external libraries necessary.
          type: string
        desc:
          description: Thorough task description. Describe what the task does on the
            outside with as much detail as possible. Inlcude implementation details
            if theyre relevant to what an engineer would care about.
          type: string
        notes:
          description: Think step by step about how to write the task code here.
          type: string
        task:
          description: Descriptive Name of task. It can be short, no more than a single
            sentence.
          type: string
      required:
      - args
      - code
      - desc
      - notes
      - task
      type: object
    MemorizeRequest:
      properties:
        dir_path:
          description: Path to a directory on the local machine to memorize. Will
            memorize all files in directory. Make sure it exists by using the shell
            first.
          type: string
        file_path:
          description: Path to a file on the local machine to memorize. Make sure
            the file exists by using the shell first.
          type: string
        text:
          description: Literal text to memorize completely. Only use for plaintext
            to remember in full. Always use a more specific param if you can (eg,
            memorize a file path, dont cat the file and then memorize the text) This
            is very useful for taking your own notes!
          type: string
        url:
          description: URL to a web resource (page, pdf, etc) to memorize. Make sure
            the URL works by using the shell first.
          type: string
      type: object
    MemorizeResult:
      properties:
        count:
          description: The number of memories created. This is useful for debugging.
          type: integer
        error:
          description: The error that happened when creating the memory if there was
            one.
          type: string
        returncode:
          description: The return code of the command. 0 means success, anything else
            means failure. If there's a failure, look at the error message to figure
            out what went wrong with the memory and either retry or ask the user for
            help.
          type: integer
      required:
      - count
      - returncode
      type: object
    RememberRequest:
      properties:
        query:
          description: A natural-language search query on memories. If the user seems
            to be referencing something specific not in the chat history, try to find
            it with this. This makes you a much better assistant, so use it often!
          type: string
      required:
      - query
      type: object
    RememberResult:
      properties:
        document:
          description: The document that was found. This is the raw text of the document.
            Read it carefully to extract good information from this yourself.
          type: string
        metadata:
          description: Metadata about the document. Contains *Very Useful Information*
            about the result (eg, where to find the code). Read it carefully to extract
            good information from this yourself.
          type: object
      required:
      - document
      - metadata
      type: object
    RunTaskRequest:
      properties:
        args:
          description: If the task script expects arguments, put their values here.
            If none, put an empty array.
          items:
            description: The positional argument that will be passed to the task
            type: string
          type: array
      required:
      - args
      type: object
    SearchRequest:
      properties:
        query:
          description: Search query.
          type: string
      required:
      - query
      type: object
    SearchResult:
      properties:
        body:
          description: Raw text extarcted from the search result page. Read this carefully
            to extract good information from this yourself.
          type: string
        title:
          description: Title of the search result page.
          type: string
        url:
          description: URL of the search result page.
          type: string
      required:
      - body
      - title
      - url
      type: object
    ShellRequest:
      properties:
        command:
          description: The zsh command to run on the user's machine.
          type: string
      required:
      - command
      type: object
    ShellResult:
      properties:
        returncode:
          description: The return code of the command. 0 means success, anything else
            means failure.
          type: integer
        stderr:
          description: The standard error of the command.
          type: string
        stdout:
          description: The standard output of the command.
          type: string
      required:
      - returncode
      - stderr
      - stdout
      type: object
    Task:
      properties:
        args:
          description: If the task script accepts arguments, they will be described
            here. If it doesnt, this is an empty array.
          items:
            description: Description of the positional argument that must be passed
              to the task
            type: string
          type: array
        code:
          description: A standalone python3 script that executes the task exactly
            as specified. It may reference any external libraries necessary.
          type: string
        desc:
          description: Thorough task description. Describe what the task does on the
            outside with as much detail as possible. Inlcude implementation details
            if theyre relevant to what an engineer would care about.
          type: string
        notes:
          description: Think step by step about how to write the task code here.
          type: string
        task:
          description: Descriptive Name of task. It can be short, no more than a single
            sentence.
          type: string
        uuid:
          description: Unique identifier (UUID) of the item. This is generated by
            the server and cannot be changed.
          type: string
      required:
      - args
      - code
      - desc
      - notes
      - task
      - uuid
      type: object
    TaskWithoutCode:
      properties:
        args:
          description: If the task script accepts arguments, they will be described
            here. If it doesnt, this is an empty array.
          items:
            description: Description of the positional argument that must be passed
              to the task
            type: string
          type: array
        desc:
          description: Thorough task description. Describe what the task does on the
            outside with as much detail as possible. Inlcude implementation details
            if theyre relevant to what an engineer would care about.
          type: string
        notes:
          description: Think step by step about how to write the task code here.
          type: string
        task:
          description: Descriptive Name of task. It can be short, no more than a single
            sentence.
          type: string
        uuid:
          description: Unique identifier (UUID) of the item. This is generated by
            the server and cannot be changed.
          type: string
      required:
      - args
      - desc
      - notes
      - task
      - uuid
      type: object
    UpdateTaskRequest:
      properties:
        args:
          description: If the task script accepts arguments, describe each of them
            here. If none, put an empty array.
          items:
            description: Description of the positional argument that must be passed
              to the task
            type: string
          type: array
        code:
          description: A standalone python3 script that executes the task exactly
            as specified. It may reference any external libraries necessary.
          type: string
        desc:
          description: Thorough task description. Describe what the task does on the
            outside with as much detail as possible. Inlcude implementation details
            if theyre relevant to what an engineer would care about.
          type: string
        notes:
          description: Think step by step about how to write the task code here.
          type: string
        task:
          description: Descriptive Name of task. It can be short, no more than a single
            sentence.
          type: string
      type: object
    UrlRequest:
      properties:
        url:
          description: URL of the page to extract information from.
          type: string
      required:
      - url
      type: object
    UrlResult:
      properties:
        body:
          description: Raw text extracted from the page. Read this carefully to extract
            good information from this yourself.
          type: string
      required:
      - body
      type: object
    VimExRequest:
      properties:
        commands:
          description: The Vim Ex mode commands (max=9) to run on the users machine.
            ATTENTION Regular Expressions Do NOT Work. Instead, ALWAYS Update Entire
            Lines By Using `:<line_number>put ='<text>'`
          items:
            type: string
          type: array
        file_name:
          description: The file name to operate on.
          type: string
      required:
      - commands
      - file_name
      type: object
info:
  description: A ChatGPT plugin API for the GPT Toolbox
  title: GPT Toolbox API
  version: v1
openapi: 3.0.2
paths:
  /create_memory:
    post:
      operationId: create_memory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemorizeRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemorizeResult'
          description: What happened when creating the memory.
      summary: Memorizes something. It's very important to use the right request param
        so the system knows how to memorize it. Before you memorize, think step by
        step about exactly what to memorize and how.
  /datetime:
    get:
      operationId: datetime
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The current datetime in the user's local timezone.
                type: string
          description: The current datetime in the user's local timezone.
      summary: Get the current datetime in the user's local timezone. Before answering
        questions related to the current datetime, you can use this to know it exactly
        in order to give a better answer.
  /random-number:
    get:
      operationId: random_number
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A random integer between 1 and 100.
                type: integer
          description: A random integer between 1 and 100.
      summary: Get a random integer between 1 and 100.
  /remember:
    post:
      operationId: remember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RememberRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RememberResult'
          description: The memory that was found, if any. If nothing was found, try
            again with a much different query.
      summary: Recalls important things, code and data from the local filesystem and
        remote locations, and your own past notes. This functionality makes you a
        MUCH Better Assistant, so use it as often as possible!
  /search:
    post:
      operationId: search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SearchResult'
                type: array
          description: Search result
        '400':
          description: Invalid input, a required field is missing
      summary: Search the web for something. This will execute a web search and return
        the results.
  /shell:
    post:
      operationId: shell
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShellRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ShellResult'
                type: array
          description: Shell result
        '400':
          description: Invalid input, a required field is missing
      summary: Run a shell command on the user's machine and get the results. This
        can be used for many different things - get creative! ATTENTION NEVER Use
        This To Edit Files - Always Use the vim_ex tool!
  /tasks:
    get:
      operationId: listTasks
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TaskWithoutCode'
                type: array
          description: List of Tasks without code.
      summary: Lists existing tasks. Its very important to know what you can do. A
        task is a special function you can run to augment your power for the user!
        This doesnt tell you the tasks code
    post:
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskWithoutCode'
          description: Task item created
        '400':
          description: Invalid input, a required field is missing
      summary: Create a Task item. A task is a special function you can run to augment
        your power for the user! ATTENTION Its very important to make sure the code
        is a complete standalone executable python script.
  /tasks/{task_uuid}:
    delete:
      operationId: deleteTask
      parameters:
      - description: Unique identifier of the Task
        in: path
        name: task_uuid
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Task item deleted
        '404':
          description: Task item not found
      summary: Delete a Task item by UUIDS. Only use this when you are sure you want
        to delete a task.
    get:
      operationId: getTask
      parameters:
      - description: Unique identifier of the Task item
        in: path
        name: task_uuid
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task item found
        '404':
          description: Task item not found
      summary: Get a specific Task by UUID. This is the way to see the code behind
        a task. Useful if you need to fix it. This just tells you about the task,
        it does not let you run it.
    put:
      operationId: updateTask
      parameters:
      - description: UUID of the Task
        in: path
        name: task_uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskWithoutCode'
          description: Task item updated
        '400':
          description: Invalid input, at least one field must be provided
      summary: Update a Task. Use this to fix a broken task. Only specify the fields
        that need to be updating. ATTENTION its very important to make sure the code
        is a complete standalone executable python script.
  /tasks/{task_uuid}/run:
    post:
      operationId: runTask
      parameters:
      - description: Unique identifier of the Task item
        in: path
        name: task_uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunTaskRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShellResult'
          description: Task item was ran
        '404':
          description: Task item not found
      summary: Runs a specific Task and gets the results. Before you run tasks, look
        at the task list to find the best one for the job.
  /url:
    post:
      operationId: url
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrlRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrlResult'
          description: Result
        '400':
          description: Invalid input, a required field is missing
      summary: Look up something on the web. This will access the url and return the
        results.
  /vim_ex:
    post:
      operationId: vim_ex
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VimExRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ShellResult'
                type: array
          description: Vim Ex mode result
        '400':
          description: Invalid input. The request must be a JSON and contain 'commands'
            and 'file_name' fields.
      summary: Run Vim commands in Ex mode (Regular Expressions Disabled) on the user's
        machine (the final -c "wq" is supplied automatically). ATTENTION ALWAYS Use
        This To Edit Files - NEVER Use the Shell Tool!
servers:
- url: http://localhost:3333
