components:
  schemas:
    CreateTaskRequest:
      properties:
        notes:
          description: Its important to add notes when creating a task to make this
            utility more useful! Think about it step by step. Add the context and
            any additional information. Can be from the user or the AI
          type: string
        status:
          description: 'Status of the Task. Value can be anything, but suggested are:
            ''todo'', ''in progress'', ''done'', ''do later'', ''cancelled'', etc.
            Put whatever makes most contextual sense here.'
          type: string
        task:
          description: Simple task description. Use other fields to add as many useful
            details as possible.
          type: string
      required:
      - notes
      - status
      - task
      type: object
    MemorizeRequest:
      properties:
        dir_path:
          description: Path to a directory on the local machine to memorize. Will
            memorize all files in directory. Make sure it exists by using the shell
            first.
          type: string
        file_path:
          description: Path to a file on the local machine to memorize. Make sure
            the file exists by using the shell first.
          type: string
        text:
          description: Literal text to memorize completely. Only use for plaintext
            to remember in full. Always use a more specific param if you can (eg,
            memorize a file path, dont cat the file and then memorize the text) This
            is very useful for taking your own notes!
          type: string
        url:
          description: URL to a web resource (page, pdf, etc) to memorize. Make sure
            the URL works by using the shell first.
          type: string
      type: object
    MemorizeResult:
      properties:
        count:
          description: The number of memories created. This is useful for debugging.
          type: integer
        error:
          description: The error that happened when creating the memory if there was
            one.
          type: string
        returncode:
          description: The return code of the command. 0 means success, anything else
            means failure. If there's a failure, look at the error message to figure
            out what went wrong with the memory and either retry or ask the user for
            help.
          type: integer
      required:
      - count
      - returncode
      type: object
    RememberRequest:
      properties:
        query:
          description: A natural-language search query on memories. If the user seems
            to be referencing something specific not in the chat history, try to find
            it with this. This makes you a much better assistant, so use it often!
          type: string
      required:
      - query
      type: object
    RememberResult:
      properties:
        document:
          description: The document that was found. This is the raw text of the document.
            Read it carefully to extract good information from this yourself.
          type: string
        metadata:
          description: Metadata about the document. Contains *Very Useful Information*
            about the result (eg, where to find the code). Read it carefully to extract
            good information from this yourself.
          type: object
      required:
      - document
      - metadata
      type: object
    SearchRequest:
      properties:
        query:
          description: Search query.
          type: string
      required:
      - query
      type: object
    SearchResult:
      properties:
        body:
          description: Raw text extarcted from the search result page. Read this carefully
            to extract good information from this yourself.
          type: string
        title:
          description: Title of the search result page.
          type: string
        url:
          description: URL of the search result page.
          type: string
      required:
      - body
      - title
      - url
      type: object
    ShellRequest:
      properties:
        command:
          description: The zsh command to run on the user's machine.
          type: string
      required:
      - command
      type: object
    ShellResult:
      properties:
        returncode:
          description: The return code of the command. 0 means success, anything else
            means failure.
          type: integer
        stderr:
          description: The standard error of the command.
          type: string
        stdout:
          description: The standard output of the command.
          type: string
      required:
      - returncode
      - stderr
      - stdout
      type: object
    Task:
      properties:
        notes:
          description: Its important to add notes about the task to make this utility
            more useful! Think about it step by step. Add the context and any additional
            information. Can be from the user or the AI
          type: string
        status:
          description: 'Status of the Task. Value can be anything, but suggested are:
            ''todo'', ''in progress'', ''done'', ''do later'', ''cancelled'', etc.
            Put whatever makes most contextual sense here.'
          type: string
        task:
          description: Simple task description
          type: string
        uuid:
          description: Unique identifier (UUID) of the item. This is generated by
            the server and cannot be changed.
          type: string
      required:
      - notes
      - status
      - task
      - uuid
      type: object
    UpdateTaskRequest:
      properties:
        notes:
          description: Freeform notes about the Task
          type: string
        status:
          description: Status of the Task
          type: string
        task:
          description: Task description
          type: string
      type: object
    UrlRequest:
      properties:
        url:
          description: URL of the page to extract information from.
          type: string
      required:
      - url
      type: object
    UrlResult:
      properties:
        body:
          description: Raw text extracted from the page. Read this carefully to extract
            good information from this yourself.
          type: string
      required:
      - body
      type: object
info:
  description: A ChatGPT plugin API for the GPT Toolbox
  title: GPT Toolbox API
  version: v1
openapi: 3.0.2
paths:
  /create_memory:
    post:
      operationId: create_memory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemorizeRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemorizeResult'
          description: What happened when creating the memory.
      summary: Memorizes something. It's very important to use the right request param
        so the system knows how to memorize it. Before you memorize, think step by
        step about exactly what to memorize and how.
  /datetime:
    get:
      operationId: datetime
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The current datetime in the user's local timezone.
                type: string
          description: The current datetime in the user's local timezone.
      summary: Get the current datetime in the user's local timezone. Before answering
        questions related to the current datetime, you can use this to know it exactly
        in order to give a better answer.
  /random-number:
    get:
      operationId: random_number
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A random integer between 1 and 100.
                type: integer
          description: A random integer between 1 and 100.
      summary: Get a random integer between 1 and 100.
  /remember:
    post:
      operationId: remember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RememberRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RememberResult'
          description: The memory that was found, if any. If nothing was found, try
            again with a much different query, or better yet, ask the user for clarification.
            If an error is returned, dont try again.
      summary: Remember something you memorized previously. If the user seems to be
        referencing something specific not in the chat history, try to find it with
        this. This makes you a much better assistant, so use it often!
  /search:
    post:
      operationId: search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SearchResult'
                type: array
          description: Search result
        '400':
          description: Invalid input, a required field is missing
      summary: Search the web for something. This will execute a web search and return
        the results.
  /shell:
    post:
      operationId: shell
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShellRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ShellResult'
                type: array
          description: Search result
        '400':
          description: Invalid input, a required field is missing
      summary: Run a shell command on the user's machine and get the results. This
        can be used for many different things - get creative (Hint, store results
        using the tasks API and then retrieve them later!)
  /tasks:
    get:
      operationId: listTasks
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: List of Task items
      summary: List all Task items
    post:
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task item created
        '400':
          description: Invalid input, a required field is missing
      summary: Create a new Task item
  /tasks/{task_uuid}:
    delete:
      operationId: deleteTask
      parameters:
      - description: Unique identifier of the Task
        in: path
        name: task_uuid
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Task item deleted
        '404':
          description: Task item not found
      summary: Delete a Task item by UUIDS. Prefer to update the status to 'cancelled'
        instead of deleting. Only use this when you are sure you want to delete the
        item.
    get:
      operationId: getTask
      parameters:
      - description: Unique identifier of the Task item
        in: path
        name: task_uuid
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task item found
        '404':
          description: Task item not found
      summary: Get a specific Task item by UUID
    put:
      operationId: updateTask
      parameters:
      - description: UUID of the Task
        in: path
        name: task_uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task item updated
        '400':
          description: Invalid input, at least one field must be provided
      summary: Update a Task item by UUID. At least one field must be provided, but
        you can also update multiple fields at once.
  /url:
    post:
      operationId: url
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrlRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrlResult'
          description: Result
        '400':
          description: Invalid input, a required field is missing
      summary: Look up something on the web. This will access the url and return the
        results.
servers:
- url: http://localhost:3333
