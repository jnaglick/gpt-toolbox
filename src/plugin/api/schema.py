from marshmallow import Schema, fields

class Task(Schema):
    uuid = fields.String(required=True, description="Unique identifier (UUID) of the item. This is generated by the server and cannot be changed.")
    task = fields.String(required=True, description="Descriptive Name of task. It can be short, no more than a single sentence.")
    desc = fields.String(required=True, description="Thorough task description. Describe what the task does on the outside with as much detail as possible. Inlcude implementation details if theyre relevant to what an engineer would care about.")
    notes = fields.String(required=True, description="Think step by step about how to write the task code here.")
    args = fields.List(fields.String(description="Description of the positional argument that must be passed to the task"), description="If the task script accepts arguments, they will be described here. If it doesnt, this is an empty array.", required=True)
    code = fields.String(required=True, description="A standalone python3 script that executes the task exactly as specified. It may reference any external libraries necessary.")

class TaskWithoutCode(Schema):
    uuid = fields.String(required=True, description="Unique identifier (UUID) of the item. This is generated by the server and cannot be changed.")
    task = fields.String(required=True, description="Descriptive Name of task. It can be short, no more than a single sentence.")
    desc = fields.String(required=True, description="Thorough task description. Describe what the task does on the outside with as much detail as possible. Inlcude implementation details if theyre relevant to what an engineer would care about.")
    notes = fields.String(required=True, description="Think step by step about how to write the task code here.")
    args = fields.List(fields.String(description="Description of the positional argument that must be passed to the task"), description="If the task script accepts arguments, they will be described here. If it doesnt, this is an empty array.", required=True)

class CreateTaskRequest(Schema):
    task = fields.String(required=True, description="Descriptive Name of task. It can be short, no more than a single sentence.")
    desc = fields.String(required=True, description="Thorough task description. Describe what the task does on the outside with as much detail as possible. Inlcude implementation details if theyre relevant to what an engineer would care about.")
    notes = fields.String(required=True, description="Think step by step about how to write the task code here.")
    code = fields.String(required=True, description="A standalone python3 script that executes the task exactly as specified. It may reference any external libraries necessary.")
    args = fields.List(fields.String(description="Description of the positional argument that must be passed to the task"), description="If the task script accepts arguments, describe each of them here. If none, put an empty array.", required=True)

class UpdateTaskRequest(Schema):
    task = fields.String(required=False, description="Descriptive Name of task. It can be short, no more than a single sentence.")
    desc = fields.String(required=False, description="Thorough task description. Describe what the task does on the outside with as much detail as possible. Inlcude implementation details if theyre relevant to what an engineer would care about.")
    notes = fields.String(required=False, description="Think step by step about how to write the task code here.")
    code = fields.String(required=False, description="A standalone python3 script that executes the task exactly as specified. It may reference any external libraries necessary.")
    args = fields.List(fields.String(description="Description of the positional argument that must be passed to the task"), description="If the task script accepts arguments, describe each of them here. If none, put an empty array.", required=False)

class RunTaskRequest(Schema):
    args = fields.List(fields.String(description="The positional argument that will be passed to the task"), description="If the task script expects arguments, put their values here. If none, put an empty array.", required=True)

class SearchRequest(Schema):
    query = fields.String(required=True, description="Search query.")

class SearchResult(Schema):
    title = fields.String(required=True, description="Title of the search result page.")
    url = fields.String(required=True, description="URL of the search result page.")
    body = fields.String(required=True, description="Raw text extarcted from the search result page. Read this carefully to extract good information from this yourself.")

class UrlRequest(Schema):
    url = fields.String(required=True, description="URL of the page to extract information from.")

class UrlResult(Schema):
    body = fields.String(required=True, description="Raw text extracted from the page. Read this carefully to extract good information from this yourself.")

class ShellRequest(Schema):
    command = fields.String(required=True, description="The zsh command to run on the user's machine.")

class ShellResult(Schema):
    returncode = fields.Integer(required=True, description="The return code of the command. 0 means success, anything else means failure.")
    stdout = fields.String(required=True, description="The standard output of the command.")
    stderr = fields.String(required=True, description="The standard error of the command.")

class MemorizeRequest(Schema):
    text = fields.String(
        required=False, 
        description="Literal text to memorize completely. Only use for plaintext to remember in full. Always use a more specific param if you can (eg, memorize a file path, dont cat the file and then memorize the text) This is very useful for taking your own notes!"
    )
    url = fields.String(
        required=False, 
        description="URL to a web resource (page, pdf, etc) to memorize. Make sure the URL works by using the shell first."
    )
    file_path = fields.String(
        required=False,
        description="Path to a file on the local machine to memorize. Make sure the file exists by using the shell first."
    )
    dir_path = fields.String(
        required=False,
        description="Path to a directory on the local machine to memorize. Will memorize all files in directory. Make sure it exists by using the shell first."
    )

class MemorizeResult(Schema):
    returncode = fields.Integer(required=True, description="The return code of the command. 0 means success, anything else means failure. If there's a failure, look at the error message to figure out what went wrong with the memory and either retry or ask the user for help.")
    count = fields.Integer(required=True, description="The number of memories created. This is useful for debugging.")
    error = fields.String(required=False, description="The error that happened when creating the memory if there was one.")

class RememberRequest(Schema):
    query = fields.String(required=True, description="A natural-language search query on memories. If the user seems to be referencing something specific not in the chat history, try to find it with this. This makes you a much better assistant, so use it often!")

class RememberResult(Schema):
    document = fields.String(required=True, description="The document that was found. This is the raw text of the document. Read it carefully to extract good information from this yourself.")
    metadata = fields.Dict(required=True, description="Metadata about the document. Contains *Very Useful Information* about the result (eg, where to find the code). Read it carefully to extract good information from this yourself.")

class VimExRequest(Schema):
    commands = fields.List(fields.String(), required=True, description="The Vim Ex mode commands (max=9) to run on the users machine. ATTENTION Regular Expressions Do NOT Work. Instead, ALWAYS Update Entire Lines By Using `:<line_number>put ='<text>'`")
    file_name = fields.String(required=True, description="The file name to operate on.") # Edit made by human

components = [
    Task, 
    TaskWithoutCode,
    CreateTaskRequest, 
    UpdateTaskRequest,
    RunTaskRequest,
    SearchRequest, 
    SearchResult, 
    UrlRequest, 
    UrlResult,
    ShellRequest,
    ShellResult,
    MemorizeRequest,
    MemorizeResult,
    RememberRequest,
    RememberResult,
    VimExRequest,
]
