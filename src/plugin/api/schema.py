from marshmallow import Schema, fields

class Task(Schema):
    uuid = fields.String(required=True, description="Unique identifier (UUID) of the item. This is generated by the server and cannot be changed.")
    task = fields.String(required=True, description="Simple task description")
    status = fields.String(required=True, description="""
Status of the Task. Value can be anything, but suggested are: 'todo', 'in progress', 'done', 'do later', 'cancelled', etc. Put whatever makes most contextual sense here.
""".strip())
    notes = fields.String(required=True, description="Its important to add notes about the task to make this utility more useful! Think about it step by step. Add the context and any additional information. Can be from the user or the AI")

class CreateTaskRequest(Schema):
    task = fields.String(required=True, description="Simple task description. Use other fields to add as many useful details as possible.")
    status = fields.String(required=True, description="Status of the Task. Value can be anything, but suggested are: 'todo', 'in progress', 'done', 'do later', 'cancelled', etc. Put whatever makes most contextual sense here.")
    notes = fields.String(required=True, description="Its important to add notes when creating a task to make this utility more useful! Think about it step by step. Add the context and any additional information. Can be from the user or the AI")

class UpdateTaskRequest(Schema):
    task = fields.String(required=False, description="Task description")
    status = fields.String(required=False, description="Status of the Task")
    notes = fields.String(required=False, description="Freeform notes about the Task")

class SearchRequest(Schema):
    query = fields.String(required=True, description="Search query.")

class SearchResult(Schema):
    title = fields.String(required=True, description="Title of the search result page.")
    url = fields.String(required=True, description="URL of the search result page.")
    body = fields.String(required=True, description="Raw text extarcted from the search result page. Read this carefully to extract good information from this yourself.")

class UrlRequest(Schema):
    url = fields.String(required=True, description="URL of the page to extract information from.")

class UrlResult(Schema):
    body = fields.String(required=True, description="Raw text extracted from the page. Read this carefully to extract good information from this yourself.")

class ShellRequest(Schema):
    command = fields.String(required=True, description="The zsh command to run on the user's machine.")

class ShellResult(Schema):
    returncode = fields.Integer(required=True, description="The return code of the command. 0 means success, anything else means failure.")
    stdout = fields.String(required=True, description="The standard output of the command.")
    stderr = fields.String(required=True, description="The standard error of the command.")

class MemoryRequest(Schema):
    text = fields.String(
        required=False, 
        description="Literal text to memorize completely. Only use for plaintext to remember in full. Always use a more specific request param if possible (eg, python_block if its python code) "
    )
    url = fields.String(
        required=False, 
        description="URL to a web resource (page, pdf, etc) to memorize. Make sure the URL works first."
    )
    file_path = fields.String(
        required=False,
        description="Path to a file on the local machine to memorize. Make sure the file exists by using the shell first."
    )
    dir_path = fields.String(
        required=False,
        description="Path to a directory on the local machine to memorize. Will memorize all files in directory. Make sure it exists by using the shell first."
    )
    python_block = fields.String(
        required=False,
        description="Python code to memorize. ONLY use this if you need to memorize new python code. If the python code exists in a file or dir, use file_path or python_project_dir_path instead."
    )
    python_project_dir_path = fields.String(
        required=False,
        description="Path to a directory on the local machine containing a python project to memorize. Will memorize all python files in directory. Make sure it exists by using the shell first."
    )

class MemoryResult(Schema):
    returncode = fields.Integer(required=True, description="The return code of the command. 0 means success, anything else means failure. If there's a failure, look at the error message to figure out what went wrong with the memory and either retry or ask the user for help.")
    error = fields.String(required=False, description="The error that happened when creating the memory if there was one.")

components = [
    Task, 
    CreateTaskRequest, 
    UpdateTaskRequest, 
    SearchRequest, 
    SearchResult, 
    UrlRequest, 
    UrlResult,
    ShellRequest,
    ShellResult,
    MemoryRequest,
    MemoryResult
]
