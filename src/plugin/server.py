import uuid

from flask import Flask, jsonify, request, abort, send_from_directory
from flask_cors import CORS
from marshmallow import Schema, fields

server = Flask(__name__)
CORS(server)

tasks = {}

class Task(Schema):
    uuid = fields.String(required=True, description="Unique identifier (UUID) of the item. This is generated by the server and cannot be changed.")
    task = fields.String(required=True, description="Simple task description")
    status = fields.String(required=True, description="""
Status of the Task. Value can be anything, but suggested are: 'todo', 'in progress', 'done', 'do later', 'cancelled', etc. Put whatever makes most contextual sense here.
""".strip())
    notes = fields.String(required=True, description="Its important to add notes about the task to make this utility more useful! Think about it step by step. Add the context and any additional information. Can be from the user or the AI")

class CreateTaskRequest(Schema):
    task = fields.String(required=True, description="Simple task description. Use other fields to add as many useful details as possible.")
    status = fields.String(required=True, description="Status of the Task. Value can be anything, but suggested are: 'todo', 'in progress', 'done', 'do later', 'cancelled', etc. Put whatever makes most contextual sense here.")
    notes = fields.String(required=True, description="Its important to add notes when creating a task to make this utility more useful! Think about it step by step. Add the context and any additional information. Can be from the user or the AI")

class UpdateTaskRequest(Schema):
    task = fields.String(required=False, description="Task description")
    status = fields.String(required=False, description="Status of the Task")
    notes = fields.String(required=False, description="Freeform notes about the Task")

@server.route('/tasks', methods=['GET'])
def index_tasks():
    """List all Task items
    ---
    get:
        operationId: listTasks
        summary: List all Task items
        responses:
            200:
                description: List of Task items
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/Task'
    """
    return jsonify(list(tasks.values()))

@server.route('/tasks/<string:task_uuid>', methods=['GET'])
def get_task(task_uuid):
    """Get a specific Task item by UUID
    ---
    get:
        operationId: getTask
        summary: Get a specific Task item by UUID
        parameters:
            - in: path
              name: task_uuid
              schema:
                type: string
              required: true
              description: Unique identifier of the Task item
        responses:
            200:
                description: Task item found
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Task'

            404:
                description: Task item not found
    """
    if task_uuid in tasks:
        return jsonify(tasks[task_uuid])
    abort(404)


@server.route('/tasks', methods=['POST'])
def post_task():
    """Create a Task item
    ---
    post:
        operationId: createTask
        summary: Create a new Task item
        requestBody:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateTaskRequest'
        responses:
            201:
                description: Task item created
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Task'
 
            400:
                description: Invalid input, a required field is missing
    """
    if not request.json or 'task' not in request.json or 'status' not in request.json or 'notes' not in request.json:
        abort(400)

    task_uuid = str(uuid.uuid4())
    item = {
        'uuid': task_uuid,
        'task': request.json['task'],
        'status': request.json['status'],
        'notes': request.json['notes']
    }
    tasks[task_uuid] = item
    return jsonify(item), 201

@server.route('/tasks/<string:task_uuid>', methods=['PUT'])
def put_task(task_uuid):
    """Update a Task item by UUID
    ---
    put:
        operationId: updateTask
        summary: Update a Task item by UUID. At least one field must be provided, but you can also update multiple fields at once.
        parameters:
            - in: path
              name: task_uuid
              schema:
                type: string
              required: true
              description: UUID of the Task
        requestBody:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateTaskRequest'
        responses:
            200:
                description: Task item updated
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Task'
 
            400:
                description: Invalid input, at least one field must be provided
    """
    if not request.json or not any(field in request.json for field in ('task', 'status', 'notes')):
        abort(400)

    item = tasks.get(task_uuid)
    if item is None:
        abort(404)

    item['task'] = request.json.get('task', item['task'])
    item['status'] = request.json.get('status', item['status'])
    item['notes'] = request.json.get('notes', item['notes'])

    tasks[task_uuid] = item
    return jsonify(item)

@server.route('/tasks/<string:task_uuid>', methods=['DELETE'])
def delete_task(task_uuid):
    """Delete a Task item by UUID
    ---
    delete:
        operationId: deleteTask
        summary: Delete a Task item by UUIDS. Prefer to update the status to 'cancelled' instead of deleting. Only use this when you are sure you want to delete the item.
        parameters:
            - in: path
              name: task_uuid
              schema:
                type: string
              required: true
              description: Unique identifier of the Task
        responses:
            200:
                description: Task item deleted
            404:
                description: Task item not found
    """
    if task_uuid in tasks:
        del tasks[task_uuid]
        return jsonify({"result": "Task deleted"})
    abort(404)

@server.route('/openapi.yaml')
def serve_openapi_spec():
    return send_from_directory('./.well-known/', 'openapi.yaml')
 
@server.route('/.well-known/ai-plugin.json')
def serve_ai_plugin():
    print("Serving ai-plugin.json")
    print("Serving ai-plugin.json")
    print("Serving ai-plugin.json")
    print("Serving ai-plugin.json")
    print("Serving ai-plugin.json")
    return send_from_directory('./.well-known/', 'ai-plugin.json')

resources = [index_tasks, get_task, post_task, put_task, delete_task]

components = [Task, CreateTaskRequest, UpdateTaskRequest]
